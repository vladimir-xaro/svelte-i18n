{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { derived, readonly, writable } from 'svelte/store';\nimport isObject from 'isobject';\nimport deepmerge from 'deepmerge';\n// import merge from 'merge';\n\nexport type Translation = {\n    [K: string]: string|Translation;\n};\n\nconst currentLocale = (() => {\n    const { set, subscribe } = writable<string|null>(null);\n    let val: string|null = null;\n    subscribe((_val) => {\n        val = _val;\n    });\n\n    const _set = (locale: string|null) => {\n        if (locale === val) {\n            return;\n        }\n\n        if (locale === null) {\n            set(null);\n            return;\n        }\n\n        if (locale in _allTranslations === false) {\n            throw new Error(`[@xaro/svelte-i18n] No translations for locale: \"${locale}\"`);\n        }\n\n        set(locale);\n    }\n\n    const _update = (cb: () => string|null) => _set(cb());\n\n    return {\n        set:    _set,\n        update: _update,\n        subscribe,\n    }\n})();\n\nexport {\n    currentLocale as locale\n};\n\nconst _allLocales = writable<Set<string>>(new Set());\nexport const allLocales = readonly(_allLocales);\n\nconst _allTranslations: Record<string, Translation> = {};\n(<any>window).allTranslations = _allTranslations;\n\nexport const init = (translations: Record<string, Translation> = {}, locale: string|null = null) => {\n    if (! isObject(translations)) {\n        throw new Error(`[@xaro/svelte-i18n] Translations must be an object`);\n    }\n\n    Object.assign(_allTranslations, translations);\n\n    _allLocales.update(s => {\n        for (const key in translations) {\n            s.add(key);\n        }\n        return s;\n    });\n\n    if (locale) {\n        if (locale in _allTranslations === false) {\n            throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${locale}`);\n        }\n    }\n\n    currentLocale.set(locale);\n}\n\nexport const hasLocale = (locale: string) => locale in _allTranslations;\n\nexport const setTranslation = (locale: string, path: string|string[], value: string|Translation) => {\n    if (locale in _allTranslations === false) {\n        // throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${locale}`);\n        _allTranslations[locale] = {};\n        _allLocales.update(s => s.add(locale));\n    }\n\n    let obj = _allTranslations[locale];\n\n    let arr: string[] = Array.isArray(path) ? path : path.split(/\\.+/);\n\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n        if (!key) {\n            throw new Error('[@xaro/svelte-i18n] Path cannot be empty, end or begin with a separator character');\n        } else if (i === arr.length - 1) {\n            obj[key] = value;\n        } else {\n            if (key in obj === false) {\n                obj[key] = {};\n            }\n            obj = <Translation>obj[key];\n        }\n    }\n}\n\nexport const addTranslation = (locale: string, path: string|string[], value: string|Translation) => {\n    if (locale in _allTranslations === false) {\n        // throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${locale}`);\n        setTranslation(locale, path, value);\n        return;\n    }\n\n    let obj = _allTranslations[locale];\n\n    let arr: string[] = Array.isArray(path) ? path : path.split(/\\.+/);\n\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n        if (!key) {\n            throw new Error('[@xaro/svelte-i18n] Path cannot be empty, end or begin with a separator character');\n        } else if (i === arr.length - 1) {\n            if (key in obj && isObject(obj[key]) && isObject(value)) {\n                obj[key] = deepmerge(<Translation>obj[key], <Translation>value);\n            } else {\n                obj[key] = value;\n            }\n        } else {\n            if (key in obj === false) {\n                obj[key] = {};\n            }\n            obj = <Translation>obj[key];\n        }\n    }\n}\n\nexport const removeTranslation = (locale: string, path: string|string[]) => {\n    if (locale in _allTranslations === false) {\n        throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${locale}`);\n    }\n\n    let obj = _allTranslations[locale];\n\n    let arr: string[] = Array.isArray(path) ? path : path.split(/\\.+/);\n\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n        if (!key) {\n            throw new Error('[@xaro/svelte-i18n] Path cannot be empty, end or begin with a separator character');\n        } else if (i === arr.length - 1) {\n            delete obj[key];\n        } else {\n            if (key in obj === false) {\n                obj[key] = {};\n            }\n            obj = <Translation>obj[key];\n        }\n    }\n}\n\nconst translate = ($locale: string|null, path: string|string[], params: Record<string, any> = {}) => {\n    if ($locale === null) {\n        return Array.isArray(path) ? path.join(',') : path;\n    }\n\n    if ($locale in _allTranslations === false) {\n        throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${$locale}`);\n    }\n    \n    let obj: Translation = _allTranslations[$locale];\n\n    const withdraw = (key: string) => {\n        if (typeof obj[key] === 'string') {\n            let val = <string>obj[key];\n            const keys = Object.keys(params);\n            if (keys.length) {\n                for (const key of keys) {\n                    val = val.replaceAll(`{{${key}}}`, params[key]);\n                }\n            }\n            return val;\n        }\n\n        obj = <Translation>obj[key];\n\n        return null;\n    }\n\n    if (Array.isArray(path)) {\n        loop:\n        for (const item of path) {\n            if (item in obj) {\n                const val = withdraw(item);\n                if (val !== null) {\n                    return val;\n                }\n            } else {\n                const parts = item.split('.');\n                parts.splice(-1);\n                while (parts.length) {\n                    const _item = parts.join('.');\n                    if (_item in obj) {\n                        const val = withdraw(item);\n                        if (val !== null) {\n                            return val;\n                        }\n                        continue loop;\n                    } else {\n                        parts.splice(-1);\n                    }\n                }\n                return Array.isArray(path) ? path.join(',') : path;\n            }\n        }\n    } else {\n        const parts = path.split('.');\n        for (const part of parts) {\n            if (part in obj) {\n                const val = withdraw(part);\n                if (val !== null) {\n                    return val;\n                }\n            } else {\n                return path;\n            }\n        }\n    }\n\n    return Array.isArray(path) ? path.join(',') : path;\n}\n\nexport const t = derived(\n    currentLocale,\n    ($locale) =>\n        (path: string|string[], params: Record<string, any> = {}) =>\n            translate($locale, path, params)\n);"],
  "mappings": "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",
  "names": ["key"]
}
