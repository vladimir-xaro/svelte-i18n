{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Readable, Writable, derived, readonly, writable } from 'svelte/store';\nimport isObject from 'isobject';\nimport deepmerge from 'deepmerge';\n// import merge from 'merge';\n\nexport type Translation = {\n    [K: string]: string|Translation;\n};\n\nexport interface CurrentLocaleStore extends Writable<string|null> {\n    setNullIf(this: void, locale: string|null): void;\n}\n\nconst currentLocale: CurrentLocaleStore = (() => {\n    const { set, subscribe } = writable<string|null>(null);\n    let val: string|null = null;\n    subscribe((_val) => {\n        val = _val;\n    });\n\n    /**\n     * @throws { Error } If locale not found\n     */\n    const _set = (locale: string|null) => {\n        if (locale === val) {\n            return;\n        }\n\n        if (locale === null) {\n            set(null);\n            return;\n        }\n\n        if (locale in _allTranslations === false) {\n            throw new Error(`[@xaro/svelte-i18n] No translations for locale: \"${locale}\"`);\n        }\n\n        set(locale);\n    }\n\n    const _update = (cb: (locale: string|null) => string|null) => _set(cb(val));\n\n    const setNullIf = (locale: string|null) => {\n        if (val !== null && locale === val) {\n            _set(locale);\n        }\n    }\n\n    return {\n        set:    _set,\n        update: _update,\n        subscribe,\n        setNullIf,\n    }\n})();\n\nexport {\n    currentLocale as locale\n};\n\nconst _allLocales: Writable<Set<string>> = writable<Set<string>>(new Set());\nexport const allLocales: Readable<Set<string>> = readonly(_allLocales);\n\nconst _allTranslations: Record<string, Translation> = {};\n(<any>window).allTranslations = _allTranslations;\n\nexport const init = (translations: Record<string, Translation> = {}, locale: string|null = null) => {\n    if (! isObject(translations)) {\n        throw new Error(`[@xaro/svelte-i18n] Translations must be an object`);\n    }\n\n    Object.assign(_allTranslations, translations);\n\n    _allLocales.update(s => {\n        for (const key in translations) {\n            s.add(key);\n        }\n        return s;\n    });\n\n    if (locale) {\n        if (locale in _allTranslations === false) {\n            throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${locale}`);\n        }\n    }\n\n    currentLocale.set(locale);\n}\n\nexport const hasLocale = (locale: string) => locale in _allTranslations;\n\nexport const removeLocale = (locale: string) => {\n    if (locale in _allTranslations) {\n        delete _allTranslations[locale];\n\n        currentLocale.setNullIf(locale);\n\n        return true;\n    }\n\n    return false;\n}\n\nexport const setTranslation = (\n    locale:     string,\n    path:       string|string[],\n    value:      string|Translation,\n    setLocale:  boolean = false\n) => {\n    if (locale in _allTranslations === false) {\n        // throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${locale}`);\n        _allTranslations[locale] = {};\n        _allLocales.update(s => s.add(locale));\n    }\n\n    let arr: string[] = Array.isArray(path) ? path : path.split(/\\.+/);\n\n    if (!arr.length) {\n        if (!isObject(value)) {\n            throw new Error('[@xaro/svelte-i18n] Translation cannot be a string when no path is given');\n        }\n\n        _allTranslations[locale] = <Translation>value;\n\n        return;\n    }\n\n    let obj = _allTranslations[locale];\n\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n        if (!key) {\n            throw new Error('[@xaro/svelte-i18n] Path cannot be empty, end or begin with a separator character');\n        } else if (i === arr.length - 1) {\n            obj[key] = value;\n        } else {\n            if (key in obj === false) {\n                obj[key] = {};\n            }\n            obj = <Translation>obj[key];\n        }\n    }\n\n    if (setLocale) {\n        currentLocale.set(locale);\n    }\n}\n\nexport const addTranslation = (\n    locale:     string,\n    path:       string|string[],\n    value:      string|Translation,\n    setLocale:  boolean = false\n) => {\n    if (locale in _allTranslations === false) {\n        // throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${locale}`);\n        setTranslation(locale, path, value);\n        return;\n    }\n\n    let arr: string[] = Array.isArray(path) ? path : path.split(/\\.+/);\n\n    if (!arr.length) {\n        if (!isObject(value)) {\n            throw new Error('[@xaro/svelte-i18n] Translation cannot be a string when no path is given');\n        }\n\n        _allTranslations[locale] = <Translation>value;\n\n        return;\n    }\n\n    let obj = _allTranslations[locale];\n\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n        if (!key) {\n            throw new Error('[@xaro/svelte-i18n] Path cannot be empty, end or begin with a separator character');\n        } else if (i === arr.length - 1) {\n            if (key in obj && isObject(obj[key]) && isObject(value)) {\n                obj[key] = deepmerge(<Translation>obj[key], <Translation>value);\n            } else {\n                obj[key] = value;\n            }\n        } else {\n            if (key in obj === false) {\n                obj[key] = {};\n            }\n            obj = <Translation>obj[key];\n        }\n    }\n\n    if (setLocale) {\n        currentLocale.set(locale);\n    }\n}\n\nexport const removeTranslation = (\n    locale:     string,\n    path:       string|string[],\n    setLocale:  boolean = false\n) => {\n    if (locale in _allTranslations === false) {\n        throw new Error(`[@xaro/svelte-i18n] No translations for locale: ${locale}`);\n    }\n\n    let obj = _allTranslations[locale];\n\n    let arr: string[] = Array.isArray(path) ? path : path.split(/\\.+/);\n\n    for (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n        if (!key) {\n            throw new Error('[@xaro/svelte-i18n] Path cannot be empty, end or begin with a separator character');\n        } else if (i === arr.length - 1) {\n            delete obj[key];\n        } else {\n            if (key in obj === false) {\n                obj[key] = {};\n            }\n            obj = <Translation>obj[key];\n        }\n    }\n\n    if (setLocale) {\n        currentLocale.set(locale);\n    }\n}\n\nconst translate = (\n    $locale:        string|null,\n    path:           string|string[],\n    params?:        Record<string, any>,\n    defaultValue?:  string\n) => {\n    if ($locale === null) {\n        return defaultValue || (Array.isArray(path) ? path.join(',') : path);\n    }\n    \n    if ($locale in _allTranslations === false) {\n        return defaultValue || (Array.isArray(path) ? path.join(',') : path);\n    }\n    \n    let obj: Translation = _allTranslations[$locale];\n\n    const withdraw = (key: string) => {\n        if (typeof obj[key] === 'string') {\n            let val = <string>obj[key];\n            if (isObject(params)) {\n                const keys = Object.keys(params!);\n                if (keys.length) {\n                    for (const key of keys) {\n                        val = val.replaceAll(`{{${key}}}`, params![key]);\n                    }\n                }\n            }\n            return val;\n        }\n\n        obj = <Translation>obj[key];\n\n        return null;\n    }\n\n    if (Array.isArray(path)) {\n        loop:\n        for (const item of path) {\n            if (item in obj) {\n                const val = withdraw(item);\n                if (val !== null) {\n                    return val;\n                }\n            } else {\n                const parts = item.split('.');\n                parts.splice(-1);\n                while (parts.length) {\n                    const _item = parts.join('.');\n                    if (_item in obj) {\n                        const val = withdraw(item);\n                        if (val !== null) {\n                            return val;\n                        }\n                        continue loop;\n                    } else {\n                        parts.splice(-1);\n                    }\n                }\n                return defaultValue || (Array.isArray(path) ? path.join(',') : path);\n            }\n        }\n    } else {\n        const parts = path.split('.');\n        for (const part of parts) {\n            if (part in obj) {\n                const val = withdraw(part);\n                if (val !== null) {\n                    return val;\n                }\n            } else {\n                return defaultValue || path;\n            }\n        }\n    }\n\n    return defaultValue || (Array.isArray(path) ? path.join(',') : path);\n}\n\nexport const t = derived(\n    currentLocale,\n    ($locale) =>\n        (path: string|string[], params: Record<string, any> = {}, defaultValue?: string) =>\n            translate($locale, path, params, defaultValue)\n);"],
  "mappings": "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",
  "names": ["derived", "readonly", "writable", "isObject", "deepmerge", "currentLocale", "set", "subscribe", "val", "_val", "_set", "locale", "_allTranslations", "cb", "_allLocales", "allLocales", "init", "translations", "s", "key", "hasLocale", "removeLocale", "setTranslation", "path", "value", "setLocale", "arr", "obj", "i", "addTranslation", "removeTranslation", "translate", "$locale", "params", "defaultValue", "withdraw", "keys", "loop", "item", "parts", "part", "t"]
}
