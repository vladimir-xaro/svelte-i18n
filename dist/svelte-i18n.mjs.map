{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { derived, writable } from 'svelte/store';\n\ntype Translation = {\n    [K: string]: string|Translation;\n};\n\nconst currentLocale = writable<string|null>(null);\n\nconst currentTrans = writable<Translation|null>(null);\n\nconst allTranslations: Record<string, Translation> = {};\n(<any>window).allTranslations = allTranslations;\n\nconst init = (translations: Record<string, Translation> = {}, locale: string|null = null) => {\n    Object.assign(allTranslations, translations);\n\n    if (locale) {\n        if (locale in allTranslations === false) {\n            throw new Error(`No translations for locale: ${locale}`);\n        }\n        currentLocale.set(locale);\n        currentTrans.set(allTranslations[locale]);\n    }\n}\n\nconst setTranslation = (locale: string, path: string|string[], value: string|Translation) => {\n    let obj = allTranslations[locale];\n    let prevObj = obj;\n\n    if (Array.isArray(path)) {\n\n    } else {\n        const parts = path.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            \n        }\n        for (const part of parts) {\n            prevObj = obj;\n            if (part in obj === false) {\n                obj[part] = {};\n            }\n            obj = <Translation>obj[part];\n        }\n        prevObj[parts.length - 1] = value;\n    }\n}\n\nconst translate = ($locale: string|null, path: string|string[], params: Record<string, any> = {}) => {\n    if ($locale === null) {\n        return Array.isArray(path) ? path.join(',') : path;\n    }\n\n    if ($locale in allTranslations === false) {\n        throw new Error(`No translations for locale: ${$locale}`);\n    }\n    \n    let obj: Translation = allTranslations[$locale];\n\n    const withdraw = (key: string) => {\n        if (typeof obj[key] === 'string') {\n            let val = <string>obj[key];\n            const keys = Object.keys(params);\n            if (keys.length) {\n                for (const key of keys) {\n                    val = val.replaceAll(`{{${key}}}`, params[key]);\n                }\n            }\n            return val;\n        }\n\n        obj = <Translation>obj[key];\n\n        return null;\n    }\n\n    if (Array.isArray(path)) {\n        loop:\n        for (const item of path) {\n            if (item in obj) {\n                const val = withdraw(item);\n                if (val !== null) {\n                    return val;\n                }\n            } else {\n                const parts = item.split('.');\n                parts.splice(-1);\n                while (parts.length) {\n                    const _item = parts.join('.');\n                    if (_item in obj) {\n                        const val = withdraw(item);\n                        if (val !== null) {\n                            return val;\n                        }\n                        continue loop;\n                    } else {\n                        parts.splice(-1);\n                    }\n                }\n                return Array.isArray(path) ? path.join(',') : path;\n            }\n        }\n    } else {\n        const parts = path.split('.');\n        for (const part of parts) {\n            if (part in obj) {\n                const val = withdraw(part);\n                if (val !== null) {\n                    return val;\n                }\n            } else {\n                return path;\n            }\n        }\n    }\n\n    return Array.isArray(path) ? path.join(',') : path;\n}\n\nconst t = derived(\n    currentLocale,\n    ($locale) => (path: string|string[], params: Record<string, any> = {}) => translate($locale, path, params)\n);\n\nexport {\n    init,\n    setTranslation,\n    currentLocale as locale,\n    t,\n    // setLocale,\n    // addLocale,\n    // removeLocale,\n    // addTranslation,\n    // removeTranslation,\n    // t,\n};"],
  "mappings": "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",
  "names": ["key"]
}
